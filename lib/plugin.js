var LogSchema, PluginFn, Schema, _, mongoose;

_ = require('lodash');

mongoose = require('mongoose');

Schema = mongoose.Schema;

LogSchema = new Schema({
  timestamp: {
    required: true,
    type: Date
  },
  log: {
    required: true,
    type: Schema.Types.Mixed
  }
});

PluginFn = function(schema, arg) {
  var ref, ref1, taskFn, timeout;
  ref = arg != null ? arg : {}, taskFn = ref.taskFn, timeout = (ref1 = ref.timeout) != null ? ref1 : null;
  if (taskFn == null) {
    throw new Error("'taskFn' parameter must be provided to MongoQueuer.TaskPlugin constructor");
  }
  schema.statics._mongoQueuerOptions = {
    taskFn: taskFn,
    timeout: timeout
  };
  schema.add({
    status: {
      required: true,
      type: String,
      "enum": ['QUEUED', 'EXECUTING', 'FAILED', 'SUCCESS']
    },
    substatus: {
      required: false,
      "default": null,
      type: String,
      "enum": ['FAILED_ERR', 'FAILED_TIMEOUT', null]
    },
    error: {
      required: false,
      "default": null,
      type: Schema.Types.Mixed
    },
    result: {
      required: false,
      "default": null,
      type: Schema.Types.Mixed
    },
    status_change_at: {
      required: true,
      type: Date
    },
    timeout_at: {
      required: false,
      "default": null,
      type: Date
    },
    status_history: {
      "default": [],
      type: [Schema.Types.Mixed]
    },
    logs: {
      "default": [],
      type: [LogSchema]
    }
  });
  schema.statics._updateStatusKwargs = function(status, substatus, arg1) {
    var commonKwargs, isInsert, kwargs, ref2, ref3, ref4, updateKwargs;
    ref2 = arg1 != null ? arg1 : {}, updateKwargs = (ref3 = ref2.updateKwargs) != null ? ref3 : {}, isInsert = (ref4 = ref2.isInsert) != null ? ref4 : false;
    commonKwargs = _.assign({
      status: status,
      substatus: substatus,
      status_change_at: new Date()
    }, updateKwargs);
    kwargs = _.clone(commonKwargs);
    if (isInsert) {
      kwargs['status_history'] = commonKwargs;
    } else {
      kwargs['$push'] = {
        status_history: commonKwargs
      };
    }
    return kwargs;
  };
  schema.statics.createTask = function(taskKwargs, done) {
    var defaultKwargs, kwargs, task;
    defaultKwargs = this._updateStatusKwargs('QUEUED', null, {
      isInsert: true
    });
    kwargs = _.chain(taskKwargs).omit(function(k) {
      return k === "status" || k === "substatus" || k === "error" || k === "result" || k === "status_change_at" || k === "timeout_at" || k === "status_history" || k === "logs";
    }).defaults(defaultKwargs).value();
    task = new this(kwargs);
    return task.save(function(err, task, numAffected) {
      return done(err, task);
    });
  };
  schema.methods.addLog = function(logKwargs) {
    var Model, kwargs, opts, query, subDocKwargs;
    Model = this.constructor;
    query = {
      _id: this._id
    };
    opts = {
      upsert: true
    };
    subDocKwargs = {
      timestamp: new Date(),
      log: logKwargs
    };
    kwargs = {
      $push: {
        logs: subDocKwargs
      }
    };
    return Model.update(query, kwargs, opts).exec();
  };
  schema.methods.retry = function(done) {
    var Model, ref2;
    Model = this.constructor;
    if ((ref2 = this.status) !== 'FAILED' && ref2 !== 'SUCCESS') {
      return done(new Error("Improper status for retry: <" + this.status + ">"));
    }
    return this._updateStatus('QUEUED', null, null, done);
  };
  schema.methods._updateStatus = function(status, substatus, resultObject, done) {
    var Model, kwargs, opts, query, ref2, ref3, ref4, ref5, ref6, ref7;
    if (resultObject == null) {
      resultObject = {};
    }
    Model = this.constructor;
    query = {
      _id: this._id,
      status_change_at: this.status_change_at
    };
    kwargs = Model._updateStatusKwargs(status, substatus, {
      updateKwargs: {
        result: (ref2 = (ref3 = (ref4 = resultObject.result) != null ? typeof ref4.toJSON === "function" ? ref4.toJSON() : void 0 : void 0) != null ? ref3 : resultObject != null ? resultObject.result : void 0) != null ? ref2 : null,
        error: (ref5 = (ref6 = (ref7 = resultObject.error) != null ? typeof ref7.toJSON === "function" ? ref7.toJSON() : void 0 : void 0) != null ? ref6 : resultObject != null ? resultObject.error : void 0) != null ? ref5 : null
      }
    });
    opts = {
      "new": true
    };
    return Model.findOneAndUpdate(query, kwargs, opts, function(err, updatedObject) {
      if (err != null) {
        return done(err);
      }
      if (updatedObject == null) {
        return done(new Error("Task no longer owned by caller."));
      }
      return done(null, updatedObject);
    });
  };
  schema.statics._dequeueOne = function(done) {
    var kwargs, opts, query, updateKwargs;
    query = {
      status: 'QUEUED'
    };
    updateKwargs = {};
    if (timeout) {
      updateKwargs.timeout_at = new Date(Date.now() + timeout);
    }
    kwargs = this._updateStatusKwargs('EXECUTING', null, {
      updateKwargs: updateKwargs
    });
    opts = {
      "new": true
    };
    return this.findOneAndUpdate(query, kwargs, opts, done);
  };
  return schema.statics._failTimedOutOne = function(done) {
    var kwargs, opts, query;
    query = {
      status: 'EXECUTING',
      timeout_at: {
        $lt: new Date()
      }
    };
    kwargs = this._updateStatusKwargs('FAILED', 'FAILED_TIMEOUT');
    opts = {
      "new": true
    };
    return this.findOneAndUpdate(query, kwargs, opts, done);
  };
};

module.exports = PluginFn;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
